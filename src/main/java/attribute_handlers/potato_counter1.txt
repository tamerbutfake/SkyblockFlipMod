package attribute_handlers;

import api_handlers.api_requester;
import com.google.gson.*;

import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.*;

public class potato_counter {
    public static Map<String, String> item_lores = api_requester.get_Item_Lores();
    public static List<String> itemTypes = new ArrayList<>();
    public static Map<String, String> item_type_identifier = new HashMap<>();
    public static List<String> item_uuids = api_requester.getItem_UUIDS();
    public static List<String> can_be_potatoed = new ArrayList<>();
    public static Map<String, String> potato_map = new HashMap<>();
    public static List<String> max_30 = new ArrayList<>();
    public static List<String> max_60 = new ArrayList<>();
    public static Map<String, Integer> potato_count = new HashMap<>();

    public static Map<String, String> find_ItemTypes(String filepath) {
        try (Reader reader = new FileReader(filepath)) {
            JsonParser parser = new JsonParser();
            JsonObject jsonObject = parser.parse(reader).getAsJsonObject();

            JsonArray itemsArray = jsonObject.getAsJsonArray("item_types");
            for (JsonElement element : itemsArray) {
                itemTypes.add(element.getAsString());
            }

            itemsArray = jsonObject.getAsJsonArray("good_items");
            for (JsonElement element : itemsArray) {
                can_be_potatoed.add(element.getAsString());
            }

            itemsArray = jsonObject.getAsJsonArray("max_30");
            for (JsonElement element : itemsArray) {
                max_30.add(element.getAsString());
            }

            itemsArray = jsonObject.getAsJsonArray("max_60");
            for (JsonElement element : itemsArray) {
                max_60.add(element.getAsString());
            }

            if (itemTypes == null || item_lores == null) {
                return null;
            }

            for (String uuid : item_uuids) {
                String lore = item_lores.get(uuid);
                if (lore != null && itemTypes.contains(lore)) {
                    item_type_identifier.put(uuid, lore);
                }
            }
            return item_type_identifier;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public static Map<String, String> Can_Be_Potatoed(Map<String, String> types_and_uuids) {
        for (Map.Entry<String, String> entry : types_and_uuids.entrySet()) {
            String uuid = entry.getKey();
            String item_type = entry.getValue().toLowerCase();
            if (can_be_potatoed.contains(item_type)) {
                potato_map.put(uuid, item_type);
            } else {
                potato_map.put(uuid, null);
            }
        }
        return potato_map;
    }

    public static Map<String, Integer> Found_potats(Map<String, String> truth_map) {
        Set<String> max_30_set = new HashSet<>(max_30);
        Set<String> max_60_set = new HashSet<>(max_60);

        for (String uuid : new ArrayList<>(item_uuids)) {
            String item_type = truth_map.get(uuid);
            if (item_type == null) continue;

            if (max_30_set.contains(item_type)) {
                processItem(uuid, "damage", 2);
            } else if (max_60_set.contains(item_type)) {
                processItem(uuid, "health", 4);
            } else {
                potato_count.put(uuid, 0);
            }
        }
        return potato_count;
    }

    private static void processItem(String uuid, String keyword, int divisor) {
        String lore = item_lores.get(uuid);
        int index = lore.toLowerCase().indexOf(keyword);
        int start = lore.indexOf("ยงe", index);
        if (start == -1) {
            potato_count.put(uuid, 0);
            return;
        }
        int end = lore.indexOf("ยง", start + 2);
        if (end == -1) end = lore.length();

        String section = lore.substring(start + 2, end);
        int startIndex = section.indexOf("(+");
        int endIndex = section.indexOf(")");
        if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
            String countString = section.substring(startIndex + 2, endIndex);
            try {
                int count = Integer.parseInt(countString);
                potato_count.put(uuid, count / divisor);
            } catch (NumberFormatException e) {
                System.out.println("Invalid number format in lore for item: " + api_requester.getItem_nameS().get(uuid) + " item_lore= " + lore);
                e.printStackTrace();
            }
        }
    }
    public static Map<String, Integer> a = Found_potats(Can_Be_Potatoed(find_ItemTypes("C:/Users/Admin/Desktop/mdk/src/main/java/attribute_handlers/item_types.json")));
    public static Map<String, Integer> get_potato_count() {
        if(!a.isEmpty()){
            return a;
        }
        else{
            return Found_potats(Can_Be_Potatoed(find_ItemTypes("C:/Users/Admin/Desktop/mdk/src/main/java/attribute_handlers/item_types.json")));
        }

    }
    public static void clearall(){
        item_type_identifier.clear();
        item_uuids.clear();
        itemTypes.clear();
        can_be_potatoed.clear();
        item_lores.clear();
        potato_count.clear();
        max_30.clear();
        max_60.clear();
    }
}
